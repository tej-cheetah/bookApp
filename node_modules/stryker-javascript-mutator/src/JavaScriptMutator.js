"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var logging_1 = require("stryker-api/logging");
var copy_1 = require("./helpers/copy");
var NodeMutatorFactory_1 = require("./NodeMutatorFactory");
var BabelHelper_1 = require("./helpers/BabelHelper");
function defaultMutators() {
    return NodeMutatorFactory_1.default.instance().knownNames().map(function (name) { return NodeMutatorFactory_1.default.instance().create(name, undefined); });
}
var JavaScriptMutator = /** @class */ (function () {
    function JavaScriptMutator(_, mutators) {
        if (mutators === void 0) { mutators = defaultMutators(); }
        this.mutators = mutators;
        this.log = logging_1.getLogger(JavaScriptMutator.name);
    }
    JavaScriptMutator.prototype.mutate = function (inputFiles) {
        var _this = this;
        var mutants = [];
        inputFiles.forEach(function (file) {
            var ast = BabelHelper_1.default.parse(file.textContent);
            BabelHelper_1.default.getNodes(ast).forEach(function (node) {
                _this.mutators.forEach(function (mutator) {
                    var mutatedNodes = mutator.mutate(node, copy_1.default);
                    if (mutatedNodes) {
                        var newMutants = _this.generateMutants(mutatedNodes, mutator.name, file.name);
                        mutants.push.apply(mutants, newMutants);
                    }
                });
            });
        });
        return mutants;
    };
    JavaScriptMutator.prototype.generateMutants = function (mutatedNodes, mutatorName, fileName) {
        var _this = this;
        var mutants = [];
        mutatedNodes.forEach(function (node) {
            var replacement = BabelHelper_1.default.generateCode(node);
            if (node.start !== null && node.end !== null) {
                var range = [node.start, node.end];
                var mutant = {
                    fileName: fileName,
                    mutatorName: mutatorName,
                    range: range,
                    replacement: replacement
                };
                _this.log.trace("Generated mutant for mutator " + mutatorName + " in file " + fileName + " with replacement code \"" + replacement + "\"");
                mutants.push(mutant);
            }
        });
        return mutants;
    };
    return JavaScriptMutator;
}());
exports.default = JavaScriptMutator;
//# sourceMappingURL=JavaScriptMutator.js.map