"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var child_process_1 = require("child_process");
var fs_1 = require("fs");
var util = require("util");
/**
 * This file contains an implementation of util.promisify (available on node >= 8)
 * Note: Can be removed once we drop support for node 6 (and 7).
 */
function promisify(original) {
    if ('promisify' in util) {
        return util.promisify(original); // let nodejs do it's thing thing, if it is supported
    }
    else {
        return innerPromisify(original); // Do it ourselves
    }
}
// This function is exported so that it can be tested on node >= 8
function innerPromisify(original) {
    return function fn() {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return new Promise(function (resolve, reject) {
            original.call.apply(original, [_this].concat(args, [function (err) {
                    var values = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        values[_i - 1] = arguments[_i];
                    }
                    if (original === fs_1.exists) {
                        // the exists callback is NOT consistent with NodeJS callbacks: https://nodejs.org/api/fs.html#fs_fs_exists_path_callback
                        // First argument is the result instead of an error
                        resolve(err);
                    }
                    else if (err) {
                        reject(err);
                    }
                    else {
                        // Make an exception for child_process.exec, this is also done by node 8+'s implementation
                        // https://github.com/nodejs/node/blob/2ec57a71343cdb725d45801508fceb0a266a9324/lib/internal/util.js#L272
                        if (original === child_process_1.exec) {
                            resolve({
                                stderr: values[1],
                                stdout: values[0]
                            });
                        }
                        else {
                            resolve(values[0]);
                        }
                    }
                }]));
        });
    };
}
exports.innerPromisify = innerPromisify;
exports.default = promisify;
//# sourceMappingURL=promisify.js.map