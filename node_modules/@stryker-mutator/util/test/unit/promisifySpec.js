"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var promisify_1 = require("../../src/promisify");
var sinon = require("sinon");
var chai_1 = require("chai");
var child_process_1 = require("child_process");
var fs_1 = require("fs");
describe('promisify', function () {
    describePromisify(promisify_1.default);
});
describe('innerPromisify', function () {
    describePromisify(promisify_1.innerPromisify);
});
function describePromisify(promisifyImplementation) {
    var _this = this;
    it('should resolve the promise when the callback resolves', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var actualCallbackFn, actualPromisifiedFn, actualPromise, actualResult;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    actualCallbackFn = sinon.stub();
                    actualPromisifiedFn = promisifyImplementation(actualCallbackFn);
                    actualPromise = actualPromisifiedFn('foo', 42);
                    actualCallbackFn.callArgWith(2, null, 'baz', 42);
                    return [4 /*yield*/, actualPromise];
                case 1:
                    actualResult = _a.sent();
                    // Assert
                    chai_1.expect(actualPromise).instanceOf(Promise);
                    chai_1.expect(actualCallbackFn).calledWithExactly('foo', 42, sinon.match.func);
                    chai_1.expect(actualResult).eq('baz');
                    return [2 /*return*/];
            }
        });
    }); });
    it('should reject the promise when the callback resolved with an error', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var actualCallbackFn, expectedError, actualPromisifiedFn, actualPromise;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    actualCallbackFn = sinon.stub();
                    expectedError = new Error('foobar');
                    actualPromisifiedFn = promisifyImplementation(actualCallbackFn);
                    actualPromise = actualPromisifiedFn('foo', 42);
                    actualCallbackFn.callArgWith(2, expectedError);
                    // Assert
                    chai_1.expect(actualPromise).instanceOf(Promise);
                    chai_1.expect(actualCallbackFn).calledWithExactly('foo', 42, sinon.match.func);
                    return [4 /*yield*/, chai_1.expect(actualPromise).rejectedWith(expectedError)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should resolve child_process.exec as an object instead of an array', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var execAsPromised, result;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    execAsPromised = promisifyImplementation(child_process_1.exec);
                    return [4 /*yield*/, execAsPromised('node -p \'"foo"\'')];
                case 1:
                    result = _a.sent();
                    chai_1.expect(result.stdout.trim()).eq('foo');
                    return [2 /*return*/];
            }
        });
    }); });
    it('should resolve fs.exists with first argument being result instead of an error', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var existsAsPromised, result;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    existsAsPromised = promisifyImplementation(fs_1.exists);
                    return [4 /*yield*/, existsAsPromised(__filename)];
                case 1:
                    result = _a.sent();
                    chai_1.expect(result).eq(true);
                    return [2 /*return*/];
            }
        });
    }); });
}
//# sourceMappingURL=promisifySpec.js.map